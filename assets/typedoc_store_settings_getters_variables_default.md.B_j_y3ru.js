import{_ as t,c as a,o as r,ae as s}from"./chunks/framework.BAlYLWiR.js";const u=JSON.parse('{"title":"Variable: default","description":"","frontmatter":{},"headers":[],"relativePath":"typedoc/store/settings/getters/variables/default.md","filePath":"typedoc/store/settings/getters/variables/default.md"}'),o={name:"typedoc/store/settings/getters/variables/default.md"};function i(l,e,n,d,h,c){return r(),a("div",null,e[0]||(e[0]=[s('<p><a href="./../../../../README"><strong>destillationapp-frontend v0.1.0</strong></a></p><hr><p><a href="./../../../../modules">destillationapp-frontend</a> / <a href="./../README">store/settings/getters</a> / default</p><h1 id="variable-default" tabindex="-1">Variable: default <a class="header-anchor" href="#variable-default" aria-label="Permalink to &quot;Variable: default&quot;">​</a></h1><blockquote><p><strong>default</strong>: <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/DestillApp/main/blob/ec2df52a50a22efb35f12a0243274f6d03fbca52/frontend/src/store/settings/getters.ts#L17" target="_blank" rel="noreferrer">store/settings/getters.ts:17</a></p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="distillerlist" tabindex="-1">distillerList() <a class="header-anchor" href="#distillerlist" aria-label="Permalink to &quot;distillerList()&quot;">​</a></h3><blockquote><p><strong>distillerList</strong>(<code>state</code>): <a href="./../../interfaces/Distiller"><code>Distiller</code></a>[]</p></blockquote><p>Gets the distiller list from the settings form data.</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="state" tabindex="-1">state <a class="header-anchor" href="#state" aria-label="Permalink to &quot;state&quot;">​</a></h5><p><code>State</code></p><p>The Vuex state.</p><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../../interfaces/Distiller"><code>Distiller</code></a>[]</p><p>The distiller list.</p><h3 id="isdarktheme" tabindex="-1">isDarkTheme() <a class="header-anchor" href="#isdarktheme" aria-label="Permalink to &quot;isDarkTheme()&quot;">​</a></h3><blockquote><p><strong>isDarkTheme</strong>(<code>state</code>): <code>boolean</code></p></blockquote><p>Gets the dark theme status from the settings form data.</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="state-1" tabindex="-1">state <a class="header-anchor" href="#state-1" aria-label="Permalink to &quot;state&quot;">​</a></h5><p><code>State</code></p><p>The Vuex state.</p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>boolean</code></p><p>Whether dark theme is enabled.</p><h3 id="settingsform" tabindex="-1">settingsForm() <a class="header-anchor" href="#settingsform" aria-label="Permalink to &quot;settingsForm()&quot;">​</a></h3><blockquote><p><strong>settingsForm</strong>(<code>state</code>): <a href="./../../interfaces/SettingsForm"><code>SettingsForm</code></a></p></blockquote><p>Gets the settings form data from the state.</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><h5 id="state-2" tabindex="-1">state <a class="header-anchor" href="#state-2" aria-label="Permalink to &quot;state&quot;">​</a></h5><p><code>State</code></p><p>The Vuex state.</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../../interfaces/SettingsForm"><code>SettingsForm</code></a></p><p>The settings form data.</p>',37)]))}const f=t(o,[["render",i]]);export{u as __pageData,f as default};
