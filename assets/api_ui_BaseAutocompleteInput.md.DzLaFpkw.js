import{_ as t,c as o,o as d,ae as a}from"./chunks/framework.BAlYLWiR.js";const h=JSON.parse('{"title":"BaseAutocompleteInput","description":"","frontmatter":{},"headers":[],"relativePath":"api/ui/BaseAutocompleteInput.md","filePath":"api/ui/BaseAutocompleteInput.md"}'),l={name:"api/ui/BaseAutocompleteInput.md"};function i(r,e,n,c,s,p){return d(),o("div",null,e[0]||(e[0]=[a('<h1 id="baseautocompleteinput" tabindex="-1">BaseAutocompleteInput <a class="header-anchor" href="#baseautocompleteinput" aria-label="Permalink to &quot;BaseAutocompleteInput&quot;">​</a></h1><p><a href="https://github.com/DestillApp/main/blob/main/frontend/src/ui/BaseAutocompleteInput.vue" target="_blank" rel="noreferrer">View source on GitHub</a></p><p>A customizable autocomplete input component with optional dropdown, validation, and theming. *</p><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td><code>label</code></td><td><code>string</code></td><td>no</td><td>The label for the input field.</td></tr><tr><td><code>modelValue</code></td><td><code>string &amp; number</code></td><td>no</td><td>The model value bound to the input field.</td></tr><tr><td><code>id</code></td><td><code>string</code></td><td>no</td><td>The id for the input field.</td></tr><tr><td><code>disabled</code></td><td><code>boolean</code></td><td>no</td><td>Flag to indicate if the input is disabled.</td></tr><tr><td><code>placeholder</code></td><td><code>string</code></td><td>no</td><td>The placeholder text for the input field.</td></tr><tr><td><code>classType</code></td><td><code>string</code></td><td>no</td><td>The class type for conditional styling.</td></tr><tr><td><code>color</code></td><td><code>string</code></td><td>no</td><td>The color context for styling (e.g., &quot;plant&quot;, &quot;distillation&quot;).</td></tr><tr><td><code>invalidInput</code></td><td><code>boolean</code></td><td>no</td><td>Flag to indicate if the input is invalid.</td></tr><tr><td><code>results</code></td><td><code>any[]</code></td><td>no</td><td>List of results for the dropdown/autocomplete.</td></tr><tr><td><code>toChoose</code></td><td><code>boolean</code></td><td>no</td><td>If true, enables dropdown selection mode.</td></tr></tbody></table><h2 id="emits" tabindex="-1">Emits <a class="header-anchor" href="#emits" aria-label="Permalink to &quot;Emits&quot;">​</a></h2><ul><li><code>update:modelValue</code></li><li><code>choose:item</code></li><li><code>update:onBlur</code></li><li><code>open:list</code></li></ul><h2 id="exposed-methods" tabindex="-1">Exposed Methods <a class="header-anchor" href="#exposed-methods" aria-label="Permalink to &quot;Exposed Methods&quot;">​</a></h2><h3 id="updatevalue" tabindex="-1"><code>updateValue()</code> <a class="header-anchor" href="#updatevalue" aria-label="Permalink to &quot;`updateValue()`&quot;">​</a></h3><p>Updates the model value when input changes.</p><p><strong>Parameters:</strong></p><ul><li><code>e</code> (<code>Event</code>): The input event.</li></ul><h3 id="chooseitem" tabindex="-1"><code>chooseItem()</code> <a class="header-anchor" href="#chooseitem" aria-label="Permalink to &quot;`chooseItem()`&quot;">​</a></h3><p>Updates the model value after clicking a list item. Temporarily disables blur to prevent unintended triggers.</p><p><strong>Parameters:</strong></p><ul><li><code>result</code> (<code>any</code>): The selected result/item.</li></ul><h3 id="handleblur" tabindex="-1"><code>handleBlur()</code> <a class="header-anchor" href="#handleblur" aria-label="Permalink to &quot;`handleBlur()`&quot;">​</a></h3><p>Handles the blur event for the input field. Emits the onBlur event if blur is not disabled.</p><h3 id="openlist" tabindex="-1"><code>openList()</code> <a class="header-anchor" href="#openlist" aria-label="Permalink to &quot;`openList()`&quot;">​</a></h3><p>Opens or closes the dropdown list.</p>',20)]))}const m=t(l,[["render",i]]);export{h as __pageData,m as default};
