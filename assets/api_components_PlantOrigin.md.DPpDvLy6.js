import{_ as t,c as o,o as a,ae as r}from"./chunks/framework.BAlYLWiR.js";const p=JSON.parse('{"title":"PlantOrigin","description":"","frontmatter":{},"headers":[],"relativePath":"api/components/PlantOrigin.md","filePath":"api/components/PlantOrigin.md"}'),n={name:"api/components/PlantOrigin.md"};function d(i,e,s,c,l,u){return a(),o("div",null,e[0]||(e[0]=[r('<h1 id="plantorigin" tabindex="-1">PlantOrigin <a class="header-anchor" href="#plantorigin" aria-label="Permalink to &quot;PlantOrigin&quot;">​</a></h1><p><a href="https://github.com/DestillApp/main/blob/main/frontend/src/components/plant/form/PlantOrigin.vue" target="_blank" rel="noreferrer">View source on GitHub</a></p><p>This component renders a form to input and manage data related to plant used in distillation, including origin, harvest date, harvest temperature, harvest range, buy date and producer details. *</p><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td><code>isFormValid</code></td><td><code>boolean</code></td><td>yes</td><td>Indicates if the form is valid.</td></tr><tr><td><code>isResetting</code></td><td><code>boolean</code></td><td>no</td><td>Indicates if the form is being reset.</td></tr><tr><td><code>wasSubmitted</code></td><td><code>boolean</code></td><td>yes</td><td>Indicates if the form was submitted.</td></tr></tbody></table><h2 id="exposed-methods" tabindex="-1">Exposed Methods <a class="header-anchor" href="#exposed-methods" aria-label="Permalink to &quot;Exposed Methods&quot;">​</a></h2><h3 id="setvalue" tabindex="-1"><code>setValue()</code> <a class="header-anchor" href="#setvalue" aria-label="Permalink to &quot;`setValue()`&quot;">​</a></h3><p>Dispatches an action to the Vuex store to set a specific value.</p><p><strong>Parameters:</strong></p><ul><li><code>currentValue</code> (<code>string</code>): The current value to be set.</li><li><code>input</code> (<code>string</code>): The input field name.</li></ul><h3 id="storedate" tabindex="-1"><code>storeDate()</code> <a class="header-anchor" href="#storedate" aria-label="Permalink to &quot;`storeDate()`&quot;">​</a></h3><p>Stores a date value in the Vuex store.</p><p><strong>Parameters:</strong></p><ul><li><code>date</code> (<code>string</code>): The date value to be stored.</li><li><code>input</code> (<code>string</code>): The input field name.</li></ul><h3 id="setcountry" tabindex="-1"><code>setCountry()</code> <a class="header-anchor" href="#setcountry" aria-label="Permalink to &quot;`setCountry()`&quot;">​</a></h3><p>Sets the selected country for the country autocomplete input.</p><p><strong>Parameters:</strong></p><ul><li><code>currentValue</code> (<code>string</code>): The selected country name.</li><li><code>input</code> (<code>string</code>): The input field name.</li></ul><h3 id="fetchcountries" tabindex="-1"><code>fetchCountries()</code> <a class="header-anchor" href="#fetchcountries" aria-label="Permalink to &quot;`fetchCountries()`&quot;">​</a></h3><p>Async function to fetch country names based on user input for the autocomplete component.</p><p><strong>Parameters:</strong></p><ul><li><code>name</code> (<code>string</code>): The search query to fetch country names for.</li></ul><p><strong>Returns:</strong> Resolves when the country names are fetched and stored in the reactive variable.</p><h3 id="oninput" tabindex="-1"><code>onInput()</code> <a class="header-anchor" href="#oninput" aria-label="Permalink to &quot;`onInput()`&quot;">​</a></h3><p>Handles the input event for the search or autocomplete component. Updates the search query and manages the timer to limit the frequency of fetch requests.</p><p><strong>Parameters:</strong></p><ul><li><code>value</code> (<code>string</code>): The input value.</li><li><code>input</code> (<code>string</code>): The input field identifier.</li></ul><h3 id="onblur" tabindex="-1"><code>onBlur()</code> <a class="header-anchor" href="#onblur" aria-label="Permalink to &quot;`onBlur()`&quot;">​</a></h3><p>Handles the blur event for the country input field. When the input field loses focus, it checks whether the user has selected a country. If no country is selected, it clears the country list and resets the search query and country name.</p>',29)]))}const m=t(n,[["render",d]]);export{p as __pageData,m as default};
