import{_ as a,c as t,o as r,ae as o}from"./chunks/framework.BAlYLWiR.js";const p=JSON.parse('{"title":"BaseSearchItem","description":"","frontmatter":{},"headers":[],"relativePath":"api/ui/BaseSearchItem.md","filePath":"api/ui/BaseSearchItem.md"}'),s={name:"api/ui/BaseSearchItem.md"};function h(d,e,c,n,i,l){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="basesearchitem" tabindex="-1">BaseSearchItem <a class="header-anchor" href="#basesearchitem" aria-label="Permalink to &quot;BaseSearchItem&quot;">​</a></h1><p><a href="https://github.com/DestillApp/main/blob/main/frontend/src/ui/BaseSearchItem.vue" target="_blank" rel="noreferrer">View source on GitHub</a></p><p>A search input component with search and clear icons, supporting color context and keyboard shortcuts. *</p><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td><code>label</code></td><td><code>string</code></td><td>no</td><td>The label for the search input.</td></tr><tr><td><code>inputColor</code></td><td><code>string</code></td><td>no</td><td>The color context for the input (e.g., &quot;plant&quot;, &quot;distillation&quot;, &quot;results&quot;).</td></tr></tbody></table><h2 id="emits" tabindex="-1">Emits <a class="header-anchor" href="#emits" aria-label="Permalink to &quot;Emits&quot;">​</a></h2><ul><li><code>search</code></li><li><code>clear</code></li></ul><h2 id="exposed-methods" tabindex="-1">Exposed Methods <a class="header-anchor" href="#exposed-methods" aria-label="Permalink to &quot;Exposed Methods&quot;">​</a></h2><h3 id="changesearchquery" tabindex="-1"><code>changeSearchQuery()</code> <a class="header-anchor" href="#changesearchquery" aria-label="Permalink to &quot;`changeSearchQuery()`&quot;">​</a></h3><p>Handles input changes and resets search state if needed.</p><h3 id="emitsearchquery" tabindex="-1"><code>emitSearchQuery()</code> <a class="header-anchor" href="#emitsearchquery" aria-label="Permalink to &quot;`emitSearchQuery()`&quot;">​</a></h3><p>Emits the search event and updates the store with the current input value.</p><h3 id="clearsearchquery" tabindex="-1"><code>clearSearchQuery()</code> <a class="header-anchor" href="#clearsearchquery" aria-label="Permalink to &quot;`clearSearchQuery()`&quot;">​</a></h3><p>Clears the search input and emits the clear event.</p><h3 id="handlekeypress" tabindex="-1"><code>handleKeyPress()</code> <a class="header-anchor" href="#handlekeypress" aria-label="Permalink to &quot;`handleKeyPress()`&quot;">​</a></h3><p>Handles keyboard events for Enter (search) and Escape (clear).</p><p><strong>Parameters:</strong></p><ul><li><code>event</code> (<code>KeyboardEvent</code>): The keyboard event.</li></ul>',18)]))}const m=a(s,[["render",h]]);export{p as __pageData,m as default};
