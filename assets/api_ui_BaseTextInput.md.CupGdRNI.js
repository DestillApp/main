import{_ as t,c as d,o,ae as a}from"./chunks/framework.BAlYLWiR.js";const p=JSON.parse('{"title":"BaseTextInput","description":"","frontmatter":{},"headers":[],"relativePath":"api/ui/BaseTextInput.md","filePath":"api/ui/BaseTextInput.md"}'),r={name:"api/ui/BaseTextInput.md"};function n(i,e,l,s,c,u){return o(),d("div",null,e[0]||(e[0]=[a('<h1 id="basetextinput" tabindex="-1">BaseTextInput <a class="header-anchor" href="#basetextinput" aria-label="Permalink to &quot;BaseTextInput&quot;">​</a></h1><p><a href="https://github.com/DestillApp/main/blob/main/frontend/src/ui/BaseTextInput.vue" target="_blank" rel="noreferrer">View source on GitHub</a></p><p>A customizable text input component with support for validation, theming, and color context. *</p><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td><code>label</code></td><td><code>string</code></td><td>no</td><td>The label for the input field.</td></tr><tr><td><code>modelValue</code></td><td>`string</td><td>number`</td><td>no</td></tr><tr><td><code>id</code></td><td><code>string</code></td><td>no</td><td>The id for the input field.</td></tr><tr><td><code>disabled</code></td><td><code>boolean</code></td><td>no</td><td>Flag to indicate if the input is disabled.</td></tr><tr><td><code>placeholder</code></td><td><code>string</code></td><td>no</td><td>The placeholder text for the input field.</td></tr><tr><td><code>classType</code></td><td><code>string</code></td><td>no</td><td>The class type for conditional styling (e.g., &quot;number&quot;, &quot;time&quot;, &quot;results&quot;).</td></tr><tr><td><code>inputColor</code></td><td><code>string</code></td><td>no</td><td>The color context for the input (e.g., &quot;plant&quot;, &quot;distillation&quot;, &quot;results&quot;).</td></tr><tr><td><code>invalidInput</code></td><td><code>boolean</code></td><td>no</td><td>Flag to indicate if the input is invalid.</td></tr><tr><td><code>storeName</code></td><td><code>string</code></td><td>no</td><td>The name of the store for value updates.</td></tr></tbody></table><h2 id="emits" tabindex="-1">Emits <a class="header-anchor" href="#emits" aria-label="Permalink to &quot;Emits&quot;">​</a></h2><ul><li><code>update:modelValue</code></li><li><code>change:modelValue</code></li><li><code>set:keyboard</code></li></ul><h2 id="exposed-methods" tabindex="-1">Exposed Methods <a class="header-anchor" href="#exposed-methods" aria-label="Permalink to &quot;Exposed Methods&quot;">​</a></h2><h3 id="updatevalue" tabindex="-1"><code>updateValue()</code> <a class="header-anchor" href="#updatevalue" aria-label="Permalink to &quot;`updateValue()`&quot;">​</a></h3><p>Updates the model value when input changes.</p><p><strong>Parameters:</strong></p><ul><li><code>e</code> (<code>Event</code>): The input event.</li></ul><h3 id="setkeyboard" tabindex="-1"><code>setKeyboard()</code> <a class="header-anchor" href="#setkeyboard" aria-label="Permalink to &quot;`setKeyboard()`&quot;">​</a></h3><p>Emits keyboard events.</p><p><strong>Parameters:</strong></p><ul><li><code>e</code> (<code>Event</code>): The keyboard event.</li></ul><h3 id="changevalue" tabindex="-1"><code>changeValue()</code> <a class="header-anchor" href="#changevalue" aria-label="Permalink to &quot;`changeValue()`&quot;">​</a></h3><p>Emits value change events when input loses focus.</p><p><strong>Parameters:</strong></p><ul><li><code>e</code> (<code>Event</code>): The blur event.</li></ul>',20)]))}const b=t(r,[["render",n]]);export{p as __pageData,b as default};
