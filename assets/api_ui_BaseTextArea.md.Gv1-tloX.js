import{_ as t,c as a,o as d,ae as o}from"./chunks/framework.Dgg8-8ov.js";const p=JSON.parse('{"title":"BaseTextArea","description":"","frontmatter":{},"headers":[],"relativePath":"api/ui/BaseTextArea.md","filePath":"api/ui/BaseTextArea.md"}'),r={name:"api/ui/BaseTextArea.md"};function l(c,e,n,s,i,h){return d(),a("div",null,e[0]||(e[0]=[o('<h1 id="basetextarea" tabindex="-1">BaseTextArea <a class="header-anchor" href="#basetextarea" aria-label="Permalink to &quot;BaseTextArea&quot;">​</a></h1><p><a href="https://github.com/DestillApp/main/blob/main/frontend/src/ui/BaseTextArea.vue" target="_blank" rel="noreferrer">View source on GitHub</a></p><p>A customizable text area component with support for validation, theming, and color context. *</p><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td><code>label</code></td><td><code>string</code></td><td>no</td><td>The label for the text area.</td></tr><tr><td><code>modelValue</code></td><td><code>string</code></td><td>no</td><td>The value bound to the text area.</td></tr><tr><td><code>id</code></td><td><code>string</code></td><td>no</td><td>The id for the text area.</td></tr><tr><td><code>placeholder</code></td><td><code>string</code></td><td>no</td><td>The placeholder text for the text area.</td></tr><tr><td><code>invalidInput</code></td><td><code>boolean</code></td><td>no</td><td>Flag to indicate if the input is invalid.</td></tr><tr><td><code>inputColor</code></td><td><code>string</code></td><td>no</td><td>The color context for the text area (e.g., &quot;results&quot;).</td></tr><tr><td><code>storeName</code></td><td><code>string</code></td><td>no</td><td>The name of the store for value updates.</td></tr></tbody></table><h2 id="emits" tabindex="-1">Emits <a class="header-anchor" href="#emits" aria-label="Permalink to &quot;Emits&quot;">​</a></h2><ul><li><code>update:modelValue</code></li><li><code>change:modelValue</code></li><li><code>set:keyboard</code></li></ul><h2 id="exposed-methods" tabindex="-1">Exposed Methods <a class="header-anchor" href="#exposed-methods" aria-label="Permalink to &quot;Exposed Methods&quot;">​</a></h2><h3 id="updatevalue" tabindex="-1"><code>updateValue()</code> <a class="header-anchor" href="#updatevalue" aria-label="Permalink to &quot;`updateValue()`&quot;">​</a></h3><p>Updates the model value when text area changes.</p><p><strong>Parameters:</strong></p><ul><li><code>e</code> (<code>Event</code>): The input event.</li></ul><h3 id="setkeyboard" tabindex="-1"><code>setKeyboard()</code> <a class="header-anchor" href="#setkeyboard" aria-label="Permalink to &quot;`setKeyboard()`&quot;">​</a></h3><p>Emits keyboard events.</p><p><strong>Parameters:</strong></p><ul><li><code>e</code> (<code>Event</code>): The keyboard event.</li></ul><h3 id="changevalue" tabindex="-1"><code>changeValue()</code> <a class="header-anchor" href="#changevalue" aria-label="Permalink to &quot;`changeValue()`&quot;">​</a></h3><p>Emits value change events when text area loses focus.</p><p><strong>Parameters:</strong></p><ul><li><code>e</code> (<code>Event</code>): The blur event.</li></ul>',20)]))}const m=t(r,[["render",l]]);export{p as __pageData,m as default};
