import{_ as t,c as a,o,ae as r}from"./chunks/framework.BAlYLWiR.js";const p=JSON.parse('{"title":"Variable: default","description":"","frontmatter":{},"headers":[],"relativePath":"typedoc/store/settings/variables/default.md","filePath":"typedoc/store/settings/variables/default.md"}'),s={name:"typedoc/store/settings/variables/default.md"};function i(d,e,n,l,c,h){return o(),a("div",null,e[0]||(e[0]=[r('<p><a href="./../../../README"><strong>destillationapp-frontend v0.1.0</strong></a></p><hr><p><a href="./../../../modules">destillationapp-frontend</a> / <a href="./../README">store/settings</a> / default</p><h1 id="variable-default" tabindex="-1">Variable: default <a class="header-anchor" href="#variable-default" aria-label="Permalink to &quot;Variable: default&quot;">​</a></h1><blockquote><p><strong>default</strong>: <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/DestillApp/main/blob/ec2df52a50a22efb35f12a0243274f6d03fbca52/frontend/src/store/settings/index.ts#L48" target="_blank" rel="noreferrer">store/settings/index.ts:48</a></p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="actions" tabindex="-1">actions <a class="header-anchor" href="#actions" aria-label="Permalink to &quot;actions&quot;">​</a></h3><blockquote><p><strong>actions</strong>: <code>object</code> = <code>settingsActions</code></p></blockquote><p>Actions for performing asynchronous tasks in the settings module.</p><h4 id="actions-adddistiller" tabindex="-1">actions.addDistiller() <a class="header-anchor" href="#actions-adddistiller" aria-label="Permalink to &quot;actions.addDistiller()&quot;">​</a></h4><blockquote><p><strong>addDistiller</strong>(<code>context</code>, <code>distiller</code>): <code>Promise</code>&lt;<code>string</code> | <code>void</code>&gt;</p></blockquote><p>Adds a distiller to the distillerList.</p><h5 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;context&quot;">​</a></h6><p><code>Context</code></p><p>The Vuex context.</p><h6 id="distiller" tabindex="-1">distiller <a class="header-anchor" href="#distiller" aria-label="Permalink to &quot;distiller&quot;">​</a></h6><p><a href="./../interfaces/Distiller"><code>Distiller</code></a></p><p>The distiller object to add.</p><h5 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>Promise</code>&lt;<code>string</code> | <code>void</code>&gt;</p><h4 id="actions-deletedistillerbyid" tabindex="-1">actions.deleteDistillerById() <a class="header-anchor" href="#actions-deletedistillerbyid" aria-label="Permalink to &quot;actions.deleteDistillerById()&quot;">​</a></h4><blockquote><p><strong>deleteDistillerById</strong>(<code>context</code>, <code>id</code>): <code>Promise</code>&lt;<code>string</code> | <code>void</code>&gt;</p></blockquote><p>Deletes a distiller from the distillerList by its ID.</p><h5 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="context-1" tabindex="-1">context <a class="header-anchor" href="#context-1" aria-label="Permalink to &quot;context&quot;">​</a></h6><p><code>Context</code></p><p>The Vuex context.</p><h6 id="id" tabindex="-1">id <a class="header-anchor" href="#id" aria-label="Permalink to &quot;id&quot;">​</a></h6><p><code>string</code></p><p>The ID of the distiller to delete.</p><h5 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>Promise</code>&lt;<code>string</code> | <code>void</code>&gt;</p><h4 id="actions-fetchlocalstoragedata" tabindex="-1">actions.fetchLocalStorageData() <a class="header-anchor" href="#actions-fetchlocalstoragedata" aria-label="Permalink to &quot;actions.fetchLocalStorageData()&quot;">​</a></h4><blockquote><p><strong>fetchLocalStorageData</strong>(<code>context</code>, <code>payload</code>): <code>void</code></p></blockquote><p>Fetches data from local storage and commits it to the state.</p><h5 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="context-2" tabindex="-1">context <a class="header-anchor" href="#context-2" aria-label="Permalink to &quot;context&quot;">​</a></h6><p><code>Context</code></p><p>The Vuex context.</p><h6 id="payload" tabindex="-1">payload <a class="header-anchor" href="#payload" aria-label="Permalink to &quot;payload&quot;">​</a></h6><p>The payload containing the key.</p><h6 id="key" tabindex="-1">key <a class="header-anchor" href="#key" aria-label="Permalink to &quot;key&quot;">​</a></h6><p>keyof <a href="./../interfaces/SettingsForm"><code>SettingsForm</code></a></p><h5 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><h4 id="actions-fetchsettings" tabindex="-1">actions.fetchSettings() <a class="header-anchor" href="#actions-fetchsettings" aria-label="Permalink to &quot;actions.fetchSettings()&quot;">​</a></h4><blockquote><p><strong>fetchSettings</strong>(<code>context</code>): <code>Promise</code>&lt;<code>string</code> | <code>void</code>&gt;</p></blockquote><p>Fetches user settings from the database.</p><h5 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="context-3" tabindex="-1">context <a class="header-anchor" href="#context-3" aria-label="Permalink to &quot;context&quot;">​</a></h6><p><code>Context</code></p><p>The Vuex context.</p><h5 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>Promise</code>&lt;<code>string</code> | <code>void</code>&gt;</p><h4 id="actions-setinitialsettings" tabindex="-1">actions.setInitialSettings() <a class="header-anchor" href="#actions-setinitialsettings" aria-label="Permalink to &quot;actions.setInitialSettings()&quot;">​</a></h4><blockquote><p><strong>setInitialSettings</strong>(<code>context</code>, <code>userId</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p>Creates initial settings in the database.</p><h5 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="context-4" tabindex="-1">context <a class="header-anchor" href="#context-4" aria-label="Permalink to &quot;context&quot;">​</a></h6><p><code>Context</code></p><p>The Vuex context.</p><h6 id="userid" tabindex="-1">userId <a class="header-anchor" href="#userid" aria-label="Permalink to &quot;userId&quot;">​</a></h6><p><code>string</code></p><p>The user ID for which to create settings.</p><h5 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h4 id="actions-setvalue" tabindex="-1">actions.setValue() <a class="header-anchor" href="#actions-setvalue" aria-label="Permalink to &quot;actions.setValue()&quot;">​</a></h4><blockquote><p><strong>setValue</strong>(<code>context</code>, <code>payload</code>): <code>void</code></p></blockquote><p>Sets a value in the state.</p><h5 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="context-5" tabindex="-1">context <a class="header-anchor" href="#context-5" aria-label="Permalink to &quot;context&quot;">​</a></h6><p><code>Context</code></p><p>The Vuex context.</p><h6 id="payload-1" tabindex="-1">payload <a class="header-anchor" href="#payload-1" aria-label="Permalink to &quot;payload&quot;">​</a></h6><p>The payload containing the input and value.</p><h6 id="input" tabindex="-1">input <a class="header-anchor" href="#input" aria-label="Permalink to &quot;input&quot;">​</a></h6><p><code>string</code></p><h6 id="value" tabindex="-1">value <a class="header-anchor" href="#value" aria-label="Permalink to &quot;value&quot;">​</a></h6><p><code>string</code> | <code>number</code> | <code>boolean</code> | <code>any</code>[]</p><h5 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><h3 id="getters" tabindex="-1">getters <a class="header-anchor" href="#getters" aria-label="Permalink to &quot;getters&quot;">​</a></h3><blockquote><p><strong>getters</strong>: <code>object</code> = <code>settingsGetters</code></p></blockquote><p>Getters for accessing settings state data.</p><h4 id="getters-distillerlist" tabindex="-1">getters.distillerList() <a class="header-anchor" href="#getters-distillerlist" aria-label="Permalink to &quot;getters.distillerList()&quot;">​</a></h4><blockquote><p><strong>distillerList</strong>(<code>state</code>): <a href="./../interfaces/Distiller"><code>Distiller</code></a>[]</p></blockquote><p>Gets the distiller list from the settings form data.</p><h5 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="state" tabindex="-1">state <a class="header-anchor" href="#state" aria-label="Permalink to &quot;state&quot;">​</a></h6><p><code>State</code></p><p>The Vuex state.</p><h5 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><a href="./../interfaces/Distiller"><code>Distiller</code></a>[]</p><p>The distiller list.</p><h4 id="getters-isdarktheme" tabindex="-1">getters.isDarkTheme() <a class="header-anchor" href="#getters-isdarktheme" aria-label="Permalink to &quot;getters.isDarkTheme()&quot;">​</a></h4><blockquote><p><strong>isDarkTheme</strong>(<code>state</code>): <code>boolean</code></p></blockquote><p>Gets the dark theme status from the settings form data.</p><h5 id="parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="state-1" tabindex="-1">state <a class="header-anchor" href="#state-1" aria-label="Permalink to &quot;state&quot;">​</a></h6><p><code>State</code></p><p>The Vuex state.</p><h5 id="returns-7" tabindex="-1">Returns <a class="header-anchor" href="#returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>boolean</code></p><p>Whether dark theme is enabled.</p><h4 id="getters-settingsform" tabindex="-1">getters.settingsForm() <a class="header-anchor" href="#getters-settingsform" aria-label="Permalink to &quot;getters.settingsForm()&quot;">​</a></h4><blockquote><p><strong>settingsForm</strong>(<code>state</code>): <a href="./../interfaces/SettingsForm"><code>SettingsForm</code></a></p></blockquote><p>Gets the settings form data from the state.</p><h5 id="parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="state-2" tabindex="-1">state <a class="header-anchor" href="#state-2" aria-label="Permalink to &quot;state&quot;">​</a></h6><p><code>State</code></p><p>The Vuex state.</p><h5 id="returns-8" tabindex="-1">Returns <a class="header-anchor" href="#returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><a href="./../interfaces/SettingsForm"><code>SettingsForm</code></a></p><p>The settings form data.</p><h3 id="mutations" tabindex="-1">mutations <a class="header-anchor" href="#mutations" aria-label="Permalink to &quot;mutations&quot;">​</a></h3><blockquote><p><strong>mutations</strong>: <code>object</code> = <code>settingsMutations</code></p></blockquote><p>Mutations for updating the settings state.</p><h4 id="mutations-changevalue" tabindex="-1">mutations.changeValue() <a class="header-anchor" href="#mutations-changevalue" aria-label="Permalink to &quot;mutations.changeValue()&quot;">​</a></h4><blockquote><p><strong>changeValue</strong>&lt;<code>K</code>&gt;(<code>state</code>, <code>payload</code>): <code>void</code></p></blockquote><p>Mutation to change the value of a field in the settings form.</p><h5 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h5><h6 id="k" tabindex="-1">K <a class="header-anchor" href="#k" aria-label="Permalink to &quot;K&quot;">​</a></h6><p><code>K</code> <em>extends</em> keyof <a href="./../interfaces/SettingsForm"><code>SettingsForm</code></a></p><h5 id="parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="state-3" tabindex="-1">state <a class="header-anchor" href="#state-3" aria-label="Permalink to &quot;state&quot;">​</a></h6><p><code>State</code></p><p>The current state object.</p><h6 id="payload-2" tabindex="-1">payload <a class="header-anchor" href="#payload-2" aria-label="Permalink to &quot;payload&quot;">​</a></h6><p>Payload containing the input field name and its new value.</p><h6 id="input-1" tabindex="-1">input <a class="header-anchor" href="#input-1" aria-label="Permalink to &quot;input&quot;">​</a></h6><p><code>K</code></p><h6 id="value-1" tabindex="-1">value <a class="header-anchor" href="#value-1" aria-label="Permalink to &quot;value&quot;">​</a></h6><p><a href="./../interfaces/SettingsForm"><code>SettingsForm</code></a>[<code>K</code>]</p><h5 id="returns-9" tabindex="-1">Returns <a class="header-anchor" href="#returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><h4 id="mutations-removedistillerbyid" tabindex="-1">mutations.removeDistillerById() <a class="header-anchor" href="#mutations-removedistillerbyid" aria-label="Permalink to &quot;mutations.removeDistillerById()&quot;">​</a></h4><blockquote><p><strong>removeDistillerById</strong>(<code>state</code>, <code>id</code>): <code>void</code></p></blockquote><p>Mutation to remove a distiller from the distillerList by its ID.</p><h5 id="parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="state-4" tabindex="-1">state <a class="header-anchor" href="#state-4" aria-label="Permalink to &quot;state&quot;">​</a></h6><p><code>State</code></p><p>The current state object.</p><h6 id="id-1" tabindex="-1">id <a class="header-anchor" href="#id-1" aria-label="Permalink to &quot;id&quot;">​</a></h6><p><code>string</code></p><p>The ID of the distiller to remove.</p><h5 id="returns-10" tabindex="-1">Returns <a class="header-anchor" href="#returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>void</code></p><h3 id="namespaced" tabindex="-1">namespaced <a class="header-anchor" href="#namespaced" aria-label="Permalink to &quot;namespaced&quot;">​</a></h3><blockquote><p><strong>namespaced</strong>: <code>boolean</code> = <code>true</code></p></blockquote><h3 id="state-5" tabindex="-1">state() <a class="header-anchor" href="#state-5" aria-label="Permalink to &quot;state()&quot;">​</a></h3><blockquote><p><strong>state</strong>(): <code>object</code></p></blockquote><p><strong><code>Function</code></strong></p><p>State object representing the settings form data. state</p><h4 id="returns-11" tabindex="-1">Returns <a class="header-anchor" href="#returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>object</code></p><p>The initial state object.</p><h5 id="settingsform" tabindex="-1">settingsForm <a class="header-anchor" href="#settingsform" aria-label="Permalink to &quot;settingsForm&quot;">​</a></h5><blockquote><p><strong>settingsForm</strong>: <a href="./../interfaces/SettingsForm"><code>SettingsForm</code></a></p></blockquote>',160)]))}const m=t(s,[["render",i]]);export{p as __pageData,m as default};
