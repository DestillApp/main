import{_ as t,c as a,o as i,ae as o}from"./chunks/framework.Dgg8-8ov.js";const u=JSON.parse('{"title":"DistillationProcess","description":"","frontmatter":{},"headers":[],"relativePath":"api/components/DistillationProcess.md","filePath":"api/components/DistillationProcess.md"}'),s={name:"api/components/DistillationProcess.md"};function d(l,e,r,c,n,h){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="distillationprocess" tabindex="-1">DistillationProcess <a class="header-anchor" href="#distillationprocess" aria-label="Permalink to &quot;DistillationProcess&quot;">​</a></h1><p><a href="https://github.com/DestillApp/main/blob/main/frontend/src/components/destillation/DistillationProcess.vue" target="_blank" rel="noreferrer">View source on GitHub</a></p><p>Handles the distillation process inputs, such as selecting the distillation type, apparatus, and setting the date.</p><ul><li>Integrates with Vuex to store form data and manage state updates.</li><li></li></ul><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td><code>isFormValid</code></td><td><code>boolean</code></td><td>yes</td><td>Indicates if the form is valid.</td></tr><tr><td><code>wasSubmitted</code></td><td><code>boolean</code></td><td>yes</td><td>Indicates if the form was submitted.</td></tr><tr><td><code>isEditing</code></td><td><code>boolean</code></td><td>no</td><td>Indicates if the form is in editing mode.</td></tr></tbody></table><h2 id="exposed-methods" tabindex="-1">Exposed Methods <a class="header-anchor" href="#exposed-methods" aria-label="Permalink to &quot;Exposed Methods&quot;">​</a></h2><h3 id="fetchdata" tabindex="-1"><code>fetchData()</code> <a class="header-anchor" href="#fetchdata" aria-label="Permalink to &quot;`fetchData()`&quot;">​</a></h3><p>Fetches initial data from local storage via the Vuex store for a specified key.</p><p><strong>Parameters:</strong></p><ul><li><code>key</code> (<code>string</code>): The key for the specific data to fetch.</li><li><code>value</code> (<code>boolean</code>): Indicates if the fetched data is related to plant information.</li></ul><h3 id="fetcharchivedata" tabindex="-1"><code>fetchArchiveData()</code> <a class="header-anchor" href="#fetcharchivedata" aria-label="Permalink to &quot;`fetchArchiveData()`&quot;">​</a></h3><p>Fetches archive data from local storage via the Vuex store for a specified key.</p><p><strong>Parameters:</strong></p><ul><li><code>key</code> (<code>string</code>): The key for the specific data to fetch.</li></ul><h3 id="setvalue" tabindex="-1"><code>setValue()</code> <a class="header-anchor" href="#setvalue" aria-label="Permalink to &quot;`setValue()`&quot;">​</a></h3><p>Updates the value of a specified input field in the Vuex store.</p><p><strong>Parameters:</strong></p><ul><li><code>value</code> (<code>string</code>): The value to set for the input.</li><li><code>input</code> (<code>string</code>): The key for the specific input field.</li></ul><h3 id="setdistillationtype" tabindex="-1"><code>setDistillationType()</code> <a class="header-anchor" href="#setdistillationtype" aria-label="Permalink to &quot;`setDistillationType()`&quot;">​</a></h3><p>Handles setting the selected distillation type and updating the store.</p><p><strong>Parameters:</strong></p><ul><li><code>value</code> (<code>string</code>): The selected distillation type.</li><li><code>input</code> (<code>string</code>): The input field triggering the event.</li></ul><h3 id="setdistillationapparatus" tabindex="-1"><code>setDistillationApparatus()</code> <a class="header-anchor" href="#setdistillationapparatus" aria-label="Permalink to &quot;`setDistillationApparatus()`&quot;">​</a></h3><p>Sets the selected distillation apparatus and updates the store.</p><p><strong>Parameters:</strong></p><ul><li><code>value</code> (<code>string</code>): The selected distillation apparatus.</li><li><code>input</code> (<code>string</code>): The input field triggering the event.</li></ul>',27)]))}const f=t(s,[["render",d]]);export{u as __pageData,f as default};
