import{_ as t,c as a,o,ae as n}from"./chunks/framework.BAlYLWiR.js";const u=JSON.parse('{"title":"DistillationPlant","description":"","frontmatter":{},"headers":[],"relativePath":"api/components/DistillationPlant.md","filePath":"api/components/DistillationPlant.md"}'),l={name:"api/components/DistillationPlant.md"};function i(d,e,s,r,c,h){return o(),a("div",null,e[0]||(e[0]=[n('<h1 id="distillationplant" tabindex="-1">DistillationPlant <a class="header-anchor" href="#distillationplant" aria-label="Permalink to &quot;DistillationPlant&quot;">​</a></h1><p><a href="https://github.com/DestillApp/main/blob/main/frontend/src/components/destillation/DistillationPlant.vue" target="_blank" rel="noreferrer">View source on GitHub</a></p><p>This component manages the selection of plant material for distillation, including details like plant part, weight, and optional soaking or shredding steps.</p><ul><li>It also interacts with Vuex for data persistence and handles the fetching of plants from an Apollo GraphQL server.</li><li></li></ul><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td><code>isFormValid</code></td><td><code>boolean</code></td><td>yes</td><td>Indicates if the form is valid.</td></tr><tr><td><code>wasSubmitted</code></td><td><code>boolean</code></td><td>yes</td><td>Indicates if the form was submitted.</td></tr><tr><td><code>isEditing</code></td><td><code>boolean</code></td><td>no</td><td>Indicates if the form is in editing mode.</td></tr></tbody></table><h2 id="exposed-methods" tabindex="-1">Exposed Methods <a class="header-anchor" href="#exposed-methods" aria-label="Permalink to &quot;Exposed Methods&quot;">​</a></h2><h3 id="getplantdata" tabindex="-1"><code>getPlantData()</code> <a class="header-anchor" href="#getplantdata" aria-label="Permalink to &quot;`getPlantData()`&quot;">​</a></h3><p>Gets plant data by ID from the GraphQL server.</p><h3 id="fetchdata" tabindex="-1"><code>fetchData()</code> <a class="header-anchor" href="#fetchdata" aria-label="Permalink to &quot;`fetchData()`&quot;">​</a></h3><p>Fetches initial data from local storage via the Vuex store for a specified key.</p><p><strong>Parameters:</strong></p><ul><li><code>key</code> (<code>string</code>): The key for the specific data to fetch.</li><li><code>value</code> (<code>boolean</code>): Indicates if the fetched data is related to plant information.</li></ul><h3 id="setplantstate" tabindex="-1"><code>setPlantState()</code> <a class="header-anchor" href="#setplantstate" aria-label="Permalink to &quot;`setPlantState()`&quot;">​</a></h3><p>Updates the selected plant&#39;s state in Vuex by dispatching key-value pairs.</p><p><strong>Parameters:</strong></p><ul><li><code>key</code> (<code>keyof FormChoosedPlant</code>): The key of the plant attribute.</li><li><code>value</code> (<code>string | number | null</code>): The value of the plant attribute.</li></ul><h3 id="setplant" tabindex="-1"><code>setPlant()</code> <a class="header-anchor" href="#setplant" aria-label="Permalink to &quot;`setPlant()`&quot;">​</a></h3><p>Sets the selected plant details in the form, including plant ID, name, part, and weight. Clears the search input and list of plants after selection.</p><p><strong>Parameters:</strong></p><ul><li><code>value</code> (<code>BasicPlant</code>): The selected plant object from the plant list.</li></ul><h3 id="fetchplants" tabindex="-1"><code>fetchPlants()</code> <a class="header-anchor" href="#fetchplants" aria-label="Permalink to &quot;`fetchPlants()`&quot;">​</a></h3><p>Fetch the list of plants from the GraphQL server by matching name.</p><p><strong>Parameters:</strong></p><ul><li><code>name</code> (<code>string</code>): The plant name to search for.</li></ul><h3 id="oninput" tabindex="-1"><code>onInput()</code> <a class="header-anchor" href="#oninput" aria-label="Permalink to &quot;`onInput()`&quot;">​</a></h3><p>Handles the input event for the search or autocomplete component. Updates the search query and manages the timer to limit the frequency of fetch requests.</p><p><strong>Parameters:</strong></p><ul><li><code>value</code> (<code>string</code>): The input value.</li><li><code>input</code> (<code>string</code>): The input field identifier.</li></ul><h3 id="onblur" tabindex="-1"><code>onBlur()</code> <a class="header-anchor" href="#onblur" aria-label="Permalink to &quot;`onBlur()`&quot;">​</a></h3><p>Handles the blur event when the input field loses focus. Clears the plant list and resets the input value if no plant is selected.</p>',31)]))}const f=t(l,[["render",i]]);export{u as __pageData,f as default};
